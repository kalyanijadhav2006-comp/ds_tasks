def countSubstringsWithKDistinct(s: str, k: int) -> int:
    def atMostK(s, k):
        count = {}
        left = 0
        res = 0
        for right in range(len(s)):
            count[s[right]] = count.get(s[right], 0) + 1
            while len(count) > k:
                count[s[left]] -= 1
                if count[s[left]] == 0:
                    del count[s[left]]
                left += 1
            res += (right - left + 1)  # number of substrings ending at right
        return res
    
    return atMostK(s, k) - atMostK(s, k - 1)


# Example usage:
s = "pqpqs"
k = 2
print(countSubstringsWithKDistinct(s, k))  # Output: 7